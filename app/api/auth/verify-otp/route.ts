import { NextResponse } from 'next/server';
import { ResultSetHeader, RowDataPacket } from 'mysql2';
import db from '@/lib/db';
import { generateToken, setAuthCookie } from '@/utils/auth';

// Database OTP record type
interface DbOtpRecord extends RowDataPacket {
  id: number;
  email: string;
  otp: string;
  is_used: number;
  expires_at: Date;
  created_at: Date;
}

// In-memory OTP record type
interface MemoryOtpRecord {
  id: 'memory';
  email: string;
  otp: string;
}

type OtpRecord = DbOtpRecord | MemoryOtpRecord;

// Base school user type for database results
interface DbSchoolUser extends RowDataPacket {
  id: number;
  email: string;
  name: string;
  role?: string;
}

// Application user type (used after processing database results)
interface AppSchoolUser {
  id: number;
  email: string;
  name: string;
  role: string;
}

interface SchoolUserInsertResult extends ResultSetHeader {
  insertId: number;
}

/**
 * In-memory store for OTPs (used as a fallback when database is not available)
 * This is a critical part of our fault tolerance strategy
 * It will be populated when OTPs are generated and stored in memory
 * The Map stores OTPs with their expiration timestamps
 * Structure: Map<email, { otp: string, expiresAt: number }>
 * 
 * Note: This is intentionally left empty as it gets populated at runtime
 * when OTPs are generated by the send-otp endpoint.
 */
const otpStore = new Map<string, { otp: string; expiresAt: number }>();

// Rate limiting for verification attempts
const verifyRateLimit = new Map<string, { count: number; lastAttempt: number }>();
const VERIFY_RATE_LIMIT = {
  WINDOW_MS: 10 * 60 * 1000, // 10 minutes
  MAX_ATTEMPTS: 5,
};

interface VerifyOtpRequest {
  email: string;
  otp: string;
  name?: string;
}

// Handle rate limiting
function handleRateLimit(clientIp: string, now: number): { allowed: boolean; response?: NextResponse } {
  let clientData = verifyRateLimit.get(clientIp) || { count: 0, lastAttempt: 0 };

  // Reset counter if window has passed
  if (now - clientData.lastAttempt > VERIFY_RATE_LIMIT.WINDOW_MS) {
    clientData = { count: 0, lastAttempt: now };
  } else if (clientData.count >= VERIFY_RATE_LIMIT.MAX_ATTEMPTS) {
    return {
      allowed: false,
      response: NextResponse.json(
        { 
          error: 'Too many attempts. Please try again later.',
          retryAfter: Math.ceil((clientData.lastAttempt + VERIFY_RATE_LIMIT.WINDOW_MS - now) / 1000)
        },
        { 
          status: 429,
          headers: {
            'Retry-After': String(Math.ceil(VERIFY_RATE_LIMIT.WINDOW_MS / 1000)),
            'X-RateLimit-Limit': String(VERIFY_RATE_LIMIT.MAX_ATTEMPTS),
            'X-RateLimit-Remaining': '0',
            'X-RateLimit-Reset': String(clientData.lastAttempt + VERIFY_RATE_LIMIT.WINDOW_MS)
          }
        }
      )
    };
  }
  
  // Update rate limit data
  clientData.count++;
  clientData.lastAttempt = now;
  verifyRateLimit.set(clientIp, clientData);
  
  return { allowed: true };
}

// Verify OTP from database or in-memory store
async function verifyOtp(email: string, otp: string): Promise<OtpRecord | null> {
  try {
    // First try database
    const [rows] = await db.execute<DbOtpRecord[]>(
      `SELECT * FROM otp_verification 
       WHERE email = ? AND otp = ? AND is_used = 0 AND expires_at > NOW()
       ORDER BY created_at DESC 
       LIMIT 1`,
      [email, otp]
    );
    return rows.length > 0 ? rows[0] : null;
  } catch (dbError) {
    console.error('Database error, falling back to in-memory store:', dbError);
    // Check in-memory store if database check fails
    const storedOtp = (otpStore as Map<string, { otp: string; expiresAt: number }>).get(email);
    const now = Date.now();
    
    if (storedOtp && storedOtp.otp === otp && storedOtp.expiresAt > now) {
      return { id: 'memory', email, otp } as const;
    }
    return null;
  }
}

// Mark OTP as used
async function markOtpAsUsed(otpRecord: OtpRecord, email: string): Promise<void> {
  if ('is_used' in otpRecord) {
    try {
      await db.execute(
        'UPDATE otp_verification SET is_used = 1 WHERE id = ?',
        [otpRecord.id]
      );
    } catch (dbError) {
      console.error('Error marking OTP as used:', dbError);
      // Continue with login even if we can't mark as used
    }
  } else {
    // Remove from in-memory store
    (otpStore as Map<string, { otp: string; expiresAt: number }>).delete(email);
  }
}

// Find or create user
async function findOrCreateUser(email: string, name?: string): Promise<AppSchoolUser> {
  const [dbSchools] = await db.execute<DbSchoolUser[]>(
    'SELECT id, email_id as email, name FROM schools WHERE email_id = ?',
    [email]
  );

  if (!Array.isArray(dbSchools) || dbSchools.length === 0) {
    // Create new user with a default role of 'user'
    const [result] = await db.execute<SchoolUserInsertResult>(
      'INSERT INTO schools (name, email_id, contact, address, city, state) VALUES (?, ?, ?, ?, ?, ?)',
      [
        email.split('@')[0], // name
        email,              // email_id
        '',                 // contact
        'Not specified',    // address
        'Unknown',          // city
        'Unknown'           // state
      ]
    );
    
    return {
      id: result.insertId,
      email,
      name: name || email.split('@')[0],
      role: 'user' // Default role for new users
    };
  }
  
  // Existing user
  const dbUser = dbSchools[0];
  return {
    id: dbUser.id,
    email: dbUser.email_id,
    name: dbUser.name || email.split('@')[0],
    role: 'user' // Default role for existing users
  };
}

// Validate request data
function validateRequest(data: unknown): data is VerifyOtpRequest {
  return (
    typeof data === 'object' &&
    data !== null &&
    'email' in data &&
    'otp' in data &&
    typeof (data as Record<string, unknown>).email === 'string' &&
    typeof (data as Record<string, unknown>).otp === 'string'
  );
}

export async function POST(request: Request) {
  try {
    const data = await request.json() as VerifyOtpRequest;
    
    if (!validateRequest(data)) {
      return NextResponse.json(
        { error: 'Email and OTP are required' },
        { status: 400 }
      );
    }
    
    const { email, otp, name } = data;
    const clientIp = request.headers.get('x-forwarded-for') || 'unknown';
    const rateLimitCheck = handleRateLimit(clientIp, Date.now());
    
    if (!rateLimitCheck.allowed && rateLimitCheck.response) {
      return rateLimitCheck.response;
    }

    // Verify OTP
    const otpRecord = await verifyOtp(email, otp);
    
    if (!otpRecord) {
      const remainingAttempts = VERIFY_RATE_LIMIT.MAX_ATTEMPTS - (verifyRateLimit.get(clientIp)?.count || 0);
      return NextResponse.json(
        { 
          error: 'Invalid or expired OTP',
          remainingAttempts
        },
        { 
          status: 400,
          headers: {
            'X-RateLimit-Remaining': String(remainingAttempts)
          }
        }
      );
    }

    // Mark OTP as used
    await markOtpAsUsed(otpRecord, email);
    
    // Find or create user
    const user = await findOrCreateUser(email, name);

    // Generate JWT token with user data
    const token = generateToken({
      userId: user.id,
      email: user.email
    });
    
    // Set HTTP-only cookie with the token
    const response = NextResponse.json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role
      }
    });

    // Set the auth cookie with the token
    await setAuthCookie(token);
    
    // Set additional user data in response headers
    response.headers.set('X-User-Id', user.id.toString());
    response.headers.set('X-User-Email', user.email);
    response.headers.set('X-User-Name', user.name || '');
    response.headers.set('X-User-Role', user.role);
    
    return response;
  } catch (error) {
    console.error('Error verifying OTP:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Internal server error',
        code: 'INTERNAL_SERVER_ERROR'
      },
      { 
        status: 500,
        headers: {
          'Cache-Control': 'no-store'
        }
      }
    );
  }
}
